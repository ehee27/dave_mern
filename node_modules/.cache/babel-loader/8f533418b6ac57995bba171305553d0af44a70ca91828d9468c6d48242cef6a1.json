{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { apiSlice } from './api/apiSlice';\nimport { setupListeners } from '@reduxjs/toolkit/dist/query';\nimport authReducer from '../features/auth/authSlice';\n\n// the apiSlice we setup acts as our reducer - hence the [KEY]\n// we add the middleware\nexport const store = configureStore({\n  reducer: {\n    [apiSlice.reducerPath]: apiSlice.reducer,\n    auth: authReducer\n  },\n  //\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(apiSlice.middleware),\n  devTools: false\n});\nsetupListeners(store.dispatch);","map":{"version":3,"names":["configureStore","apiSlice","setupListeners","authReducer","store","reducer","reducerPath","auth","middleware","getDefaultMiddleware","concat","devTools","dispatch"],"sources":["/Users/scottlucas/Desktop/dave_mern_frontend/dave_mern_frontend/src/app/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\nimport { apiSlice } from './api/apiSlice'\nimport { setupListeners } from '@reduxjs/toolkit/dist/query'\nimport authReducer from '../features/auth/authSlice'\n\n// the apiSlice we setup acts as our reducer - hence the [KEY]\n// we add the middleware\nexport const store = configureStore({\n  reducer: { [apiSlice.reducerPath]: apiSlice.reducer, auth: authReducer },\n  //\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().concat(apiSlice.middleware),\n\n  devTools: false,\n})\n\nsetupListeners(store.dispatch)\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,cAAc,QAAQ,6BAA6B;AAC5D,OAAOC,WAAW,MAAM,4BAA4B;;AAEpD;AACA;AACA,OAAO,MAAMC,KAAK,GAAGJ,cAAc,CAAC;EAClCK,OAAO,EAAE;IAAE,CAACJ,QAAQ,CAACK,WAAW,GAAGL,QAAQ,CAACI,OAAO;IAAEE,IAAI,EAAEJ;EAAY,CAAC;EACxE;EACAK,UAAU,EAAEC,oBAAoB,IAC9BA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACT,QAAQ,CAACO,UAAU,CAAC;EAEpDG,QAAQ,EAAE;AACZ,CAAC,CAAC;AAEFT,cAAc,CAACE,KAAK,CAACQ,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}