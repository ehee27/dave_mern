{"ast":null,"code":"import { createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport { apiSlice } from '../../app/api/apiSlice';\nconst notesAdapter = createEntityAdapter({\n  // list them in order\n  sortComparer: (a, b) => a.completed === b.completed ? 0 : a.completed ? 1 : -1\n});\nconst initialState = notesAdapter.getInitialState();\nexport const notesApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    //--------------------------- GET ALL ----------------------------------\n    getNotes: builder.query({\n      query: () => '/notes',\n      // CHECK THAT STATUS HAS SUCCEEDED '200' AND NO ERROR\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      // we TRANSFORM the ID specifcally from 'id' to our mongo format..., '_id'\n      // we then set the state to our loadedNotes\n      keepUnusedDataFor: 5,\n      transformResponse: responseData => {\n        const loadedNotes = responseData.map(note => {\n          note.id = note._id;\n          return note;\n        });\n        return notesAdapter.setAll(initialState, loadedNotes);\n      },\n      providesTags: (result, error, arg) => {\n        // optional chaining to check if id's exist\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Note',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Note',\n            id\n          }))];\n        } else return [{\n          type: 'Note',\n          id: 'LIST'\n        }];\n      }\n    }),\n    //--------------------------- ADD New ----------------------------------\n\n    addNewNote: builder.mutation({\n      query: initialState => ({\n        url: '/notes',\n        method: 'POST',\n        body: {\n          ...initialState\n        }\n      }),\n      invalidateTags: [{\n        type: 'Note',\n        id: 'LIST'\n      }]\n    }),\n    //--------------------------- UPDATE ----------------------------------\n\n    updateNote: builder.mutation({\n      query: initialNote => ({\n        url: '/notes',\n        method: 'PATCH',\n        body: {\n          ...initialNote\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Note',\n        id: arg.id\n      }]\n    }),\n    //--------------------------- DELETE ----------------------------------\n\n    deleteNote: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: '/notes',\n          method: 'DELETE',\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Note',\n        id: arg.id\n      }]\n    })\n  })\n});\n\n// auto-generates our hooks with 'use' and 'query'\nexport const {\n  useGetNotesQuery,\n  useAddNewNoteMutation,\n  useUpdateNoteMutation,\n  useDeleteNoteMutation\n} = notesApiSlice;\n\n// returns the query result object - 'select' the query result\nexport const selectNotesResult = notesApiSlice.endpoints.getNotes.select();\n\n// creates memoized selector\nconst selectNotesData = createSelector(selectNotesResult, notesResult => notesResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllNotes,\n  selectById: selectNoteById,\n  selectIds: selectNoteIds\n  // Pass in a selector that returns the notes slice of state\n} = notesAdapter.getSelectors(state => {\n  var _selectNotesData;\n  return (_selectNotesData = selectNotesData(state)) !== null && _selectNotesData !== void 0 ? _selectNotesData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","notesAdapter","sortComparer","a","b","completed","initialState","getInitialState","notesApiSlice","injectEndpoints","endpoints","builder","getNotes","query","validateStatus","response","result","status","isError","keepUnusedDataFor","transformResponse","responseData","loadedNotes","map","note","id","_id","setAll","providesTags","error","arg","ids","type","addNewNote","mutation","url","method","body","invalidateTags","updateNote","initialNote","invalidatesTags","deleteNote","_ref","useGetNotesQuery","useAddNewNoteMutation","useUpdateNoteMutation","useDeleteNoteMutation","selectNotesResult","select","selectNotesData","notesResult","data","selectAll","selectAllNotes","selectById","selectNoteById","selectIds","selectNoteIds","getSelectors","state","_selectNotesData"],"sources":["/Users/scottlucas/Desktop/dave_mern_frontend/dave_mern_frontend/src/features/notes/notesApiSlice.js"],"sourcesContent":["import { createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport { apiSlice } from '../../app/api/apiSlice';\n\nconst notesAdapter = createEntityAdapter({\n  // list them in order\n  sortComparer: (a, b) =>\n    a.completed === b.completed ? 0 : a.completed ? 1 : -1,\n});\n\nconst initialState = notesAdapter.getInitialState();\n\nexport const notesApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    //--------------------------- GET ALL ----------------------------------\n    getNotes: builder.query({\n      query: () => '/notes',\n      // CHECK THAT STATUS HAS SUCCEEDED '200' AND NO ERROR\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      // we TRANSFORM the ID specifcally from 'id' to our mongo format..., '_id'\n      // we then set the state to our loadedNotes\n      keepUnusedDataFor: 5,\n      transformResponse: responseData => {\n        const loadedNotes = responseData.map(note => {\n          note.id = note._id;\n          return note;\n        });\n        return notesAdapter.setAll(initialState, loadedNotes);\n      },\n      providesTags: (result, error, arg) => {\n        // optional chaining to check if id's exist\n        if (result?.ids) {\n          return [\n            { type: 'Note', id: 'LIST' },\n            ...result.ids.map(id => ({ type: 'Note', id })),\n          ];\n        } else return [{ type: 'Note', id: 'LIST' }];\n      },\n    }),\n\n    //--------------------------- ADD New ----------------------------------\n\n    addNewNote: builder.mutation({\n      query: initialState => ({\n        url: '/notes',\n        method: 'POST',\n        body: {\n          ...initialState,\n        },\n      }),\n      invalidateTags: [{ type: 'Note', id: 'LIST' }],\n    }),\n\n    //--------------------------- UPDATE ----------------------------------\n\n    updateNote: builder.mutation({\n      query: initialNote => ({\n        url: '/notes',\n        method: 'PATCH',\n        body: {\n          ...initialNote,\n        },\n      }),\n      invalidatesTags: (result, error, arg) => [{ type: 'Note', id: arg.id }],\n    }),\n\n    //--------------------------- DELETE ----------------------------------\n\n    deleteNote: builder.mutation({\n      query: ({ id }) => ({\n        url: '/notes',\n        method: 'DELETE',\n        body: { id },\n      }),\n      invalidatesTags: (result, error, arg) => [{ type: 'Note', id: arg.id }],\n    }),\n  }),\n});\n\n// auto-generates our hooks with 'use' and 'query'\nexport const {\n  useGetNotesQuery,\n  useAddNewNoteMutation,\n  useUpdateNoteMutation,\n  useDeleteNoteMutation,\n} = notesApiSlice;\n\n// returns the query result object - 'select' the query result\nexport const selectNotesResult = notesApiSlice.endpoints.getNotes.select();\n\n// creates memoized selector\nconst selectNotesData = createSelector(\n  selectNotesResult,\n  notesResult => notesResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllNotes,\n  selectById: selectNoteById,\n  selectIds: selectNoteIds,\n  // Pass in a selector that returns the notes slice of state\n} = notesAdapter.getSelectors(state => selectNotesData(state) ?? initialState);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}