{"ast":null,"code":"var _s = $RefreshSig$();\n// this custom hook will pull in the token and set some variables\n// decode the token OBJECT\n// destructure the username and roles\n// check to see if the roles array 'includes' Manager and/or Admin\n// if roles exist, assign them to our variables\n// return all this in our auth object that we can call in components\n\nimport { useSelector } from 'react-redux';\nimport { selectCurrentToken } from '../features/auth/authSlice';\nimport jwtDecode from 'jwt-decode';\nconst useAuth = () => {\n  _s();\n  // pull in the token and set some variables\n  const token = useSelector(selectCurrentToken);\n  let isManager = false;\n  let isAdmin = false;\n  let status = 'Employee';\n  if (token) {\n    // decode the token OBJECT\n    // destructure the username and roles\n    const decoded = jwtDecode(token);\n    const {\n      username,\n      roles\n    } = decoded.UserInfo;\n\n    // check to see if the roles array 'includes' Manager and/or Admin\n    isManager = roles.includes('Manager');\n    isAdmin = roles.includes('Admin');\n\n    // if roles exist, assign them to our variables\n    if (isManager) status = 'Manager';\n    if (isAdmin) status = 'Admin';\n    return {\n      username,\n      roles,\n      status,\n      isManager,\n      isAdmin\n    };\n  }\n  // return all this in our auth object that we can call in components\n  return {\n    username: '',\n    roles: [],\n    isManager,\n    isAdmin,\n    status\n  };\n};\n_s(useAuth, \"bD5+gKbiITcJRDYAIJK4ZSEgato=\", false, function () {\n  return [useSelector];\n});\nexport default useAuth;","map":{"version":3,"names":["useSelector","selectCurrentToken","jwtDecode","useAuth","_s","token","isManager","isAdmin","status","decoded","username","roles","UserInfo","includes"],"sources":["/Users/scottlucas/Desktop/dave_mern_frontend/dave_mern_frontend/src/hooks/useAuth.js"],"sourcesContent":["// this custom hook will pull in the token and set some variables\n// decode the token OBJECT\n// destructure the username and roles\n// check to see if the roles array 'includes' Manager and/or Admin\n// if roles exist, assign them to our variables\n// return all this in our auth object that we can call in components\n\nimport { useSelector } from 'react-redux'\nimport { selectCurrentToken } from '../features/auth/authSlice'\nimport jwtDecode from 'jwt-decode'\n\nconst useAuth = () => {\n  // pull in the token and set some variables\n  const token = useSelector(selectCurrentToken)\n  let isManager = false\n  let isAdmin = false\n  let status = 'Employee'\n\n  if (token) {\n    // decode the token OBJECT\n    // destructure the username and roles\n    const decoded = jwtDecode(token)\n    const { username, roles } = decoded.UserInfo\n\n    // check to see if the roles array 'includes' Manager and/or Admin\n    isManager = roles.includes('Manager')\n    isAdmin = roles.includes('Admin')\n\n    // if roles exist, assign them to our variables\n    if (isManager) status = 'Manager'\n    if (isAdmin) status = 'Admin'\n\n    return { username, roles, status, isManager, isAdmin }\n  }\n  // return all this in our auth object that we can call in components\n  return { username: '', roles: [], isManager, isAdmin, status }\n}\n\nexport default useAuth\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAMC,KAAK,GAAGL,WAAW,CAACC,kBAAkB,CAAC;EAC7C,IAAIK,SAAS,GAAG,KAAK;EACrB,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAIC,MAAM,GAAG,UAAU;EAEvB,IAAIH,KAAK,EAAE;IACT;IACA;IACA,MAAMI,OAAO,GAAGP,SAAS,CAACG,KAAK,CAAC;IAChC,MAAM;MAAEK,QAAQ;MAAEC;IAAM,CAAC,GAAGF,OAAO,CAACG,QAAQ;;IAE5C;IACAN,SAAS,GAAGK,KAAK,CAACE,QAAQ,CAAC,SAAS,CAAC;IACrCN,OAAO,GAAGI,KAAK,CAACE,QAAQ,CAAC,OAAO,CAAC;;IAEjC;IACA,IAAIP,SAAS,EAAEE,MAAM,GAAG,SAAS;IACjC,IAAID,OAAO,EAAEC,MAAM,GAAG,OAAO;IAE7B,OAAO;MAAEE,QAAQ;MAAEC,KAAK;MAAEH,MAAM;MAAEF,SAAS;MAAEC;IAAQ,CAAC;EACxD;EACA;EACA,OAAO;IAAEG,QAAQ,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEL,SAAS;IAAEC,OAAO;IAAEC;EAAO,CAAC;AAChE,CAAC;AAAAJ,EAAA,CAzBKD,OAAO;EAAA,QAEGH,WAAW;AAAA;AAyB3B,eAAeG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}