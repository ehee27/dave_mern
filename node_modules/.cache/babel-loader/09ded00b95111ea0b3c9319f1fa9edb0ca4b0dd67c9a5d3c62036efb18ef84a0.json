{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst baseQuery = fetchBaseQuery({\n  baseUrl: 'http://localhost:3500',\n  // set the 'include' keyword to include token\n  credentials: 'include',\n  // prep the payload headers and destructure 'getState'\n  prepareHeaders: (headers, _ref) => {\n    let {\n      getState\n    } = _ref;\n    // set the \"AUTH state\" with the Bearer's token\n    const token = getState().auth.token;\n    if (token) {\n      headers.set('authorization', `Bearer ${token}`);\n    }\n    return headers;\n  }\n});\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  var _result$error;\n  // console.log(args) // request url, method, body\n  // console.log(api) // signal, dispatch, getState()\n  // console.log(extraOptions) // custom like {shout: ture}\n\n  let result = await baseQuery(args, api, extraOptions);\n  if ((result === null || result === void 0 ? void 0 : (_result$error = result.error) === null || _result$error === void 0 ? void 0 : _result$error.status) === 403) {\n    console.log('sending refresh token');\n    const refreshResult = await baseQuery('/auth/refresh', api, extraOptions);\n    if (refreshResult !== null && refreshResult !== void 0 && refreshResult.data) {}\n  }\n};\nexport const apiSlice = createApi({\n  baseQuery,\n  tagTypes: ['Note', 'User'],\n  endpoints: builder => ({})\n});","map":{"version":3,"names":["createApi","fetchBaseQuery","baseQuery","baseUrl","credentials","prepareHeaders","headers","_ref","getState","token","auth","set","baseQueryWithReauth","args","api","extraOptions","_result$error","result","error","status","console","log","refreshResult","data","apiSlice","tagTypes","endpoints","builder"],"sources":["/Users/scottlucas/Desktop/dave_mern_frontend/dave_mern_frontend/src/app/api/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nconst baseQuery = fetchBaseQuery({\n  baseUrl: 'http://localhost:3500',\n  // set the 'include' keyword to include token\n  credentials: 'include',\n  // prep the payload headers and destructure 'getState'\n  prepareHeaders: (headers, { getState }) => {\n    // set the \"AUTH state\" with the Bearer's token\n    const token = getState().auth.token\n    if (token) {\n      headers.set('authorization', `Bearer ${token}`)\n    }\n    return headers\n  },\n})\n\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  // console.log(args) // request url, method, body\n  // console.log(api) // signal, dispatch, getState()\n  // console.log(extraOptions) // custom like {shout: ture}\n\n  let result = await baseQuery(args, api, extraOptions)\n\n  if (result?.error?.status === 403) {\n    console.log('sending refresh token')\n\n    const refreshResult = await baseQuery('/auth/refresh', api, extraOptions)\n\n    if (refreshResult?.data) {\n    }\n  }\n}\n\nexport const apiSlice = createApi({\n  baseQuery,\n  tagTypes: ['Note', 'User'],\n  endpoints: builder => ({}),\n})\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,MAAMC,SAAS,GAAGD,cAAc,CAAC;EAC/BE,OAAO,EAAE,uBAAuB;EAChC;EACAC,WAAW,EAAE,SAAS;EACtB;EACAC,cAAc,EAAEA,CAACC,OAAO,EAAAC,IAAA,KAAmB;IAAA,IAAjB;MAAEC;IAAS,CAAC,GAAAD,IAAA;IACpC;IACA,MAAME,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;IACnC,IAAIA,KAAK,EAAE;MACTH,OAAO,CAACK,GAAG,CAAC,eAAe,EAAG,UAASF,KAAM,EAAC,CAAC;IACjD;IACA,OAAOH,OAAO;EAChB;AACF,CAAC,CAAC;AAEF,MAAMM,mBAAmB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,GAAG,EAAEC,YAAY,KAAK;EAAA,IAAAC,aAAA;EAC7D;EACA;EACA;;EAEA,IAAIC,MAAM,GAAG,MAAMf,SAAS,CAACW,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC;EAErD,IAAI,CAAAE,MAAM,aAANA,MAAM,wBAAAD,aAAA,GAANC,MAAM,CAAEC,KAAK,cAAAF,aAAA,uBAAbA,aAAA,CAAeG,MAAM,MAAK,GAAG,EAAE;IACjCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IAEpC,MAAMC,aAAa,GAAG,MAAMpB,SAAS,CAAC,eAAe,EAAEY,GAAG,EAAEC,YAAY,CAAC;IAEzE,IAAIO,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEC,IAAI,EAAE,CACzB;EACF;AACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGxB,SAAS,CAAC;EAChCE,SAAS;EACTuB,QAAQ,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EAC1BC,SAAS,EAAEC,OAAO,KAAK,CAAC,CAAC;AAC3B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}