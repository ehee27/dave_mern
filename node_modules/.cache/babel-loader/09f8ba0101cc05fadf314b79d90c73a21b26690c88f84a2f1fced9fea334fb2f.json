{"ast":null,"code":"import { createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport { apiSlice } from '../../app/api/apiSlice';\nconst usersAdapter = createEntityAdapter({});\nconst initialState = usersAdapter.getInitialState();\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    //--------------------------- GET ALL ----------------------------------\n\n    getUsers: builder.query({\n      query: () => ({\n        url: '/users',\n        // CHECK THAT STATUS HAS SUCCEEDED '200' AND NO ERROR\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError;\n        }\n      }),\n      // keepUnusedDataFor: 5,\n      // we TRANSFORM the ID specifcally from 'id' to our mongo format..., '_id'\n      // we then set the state to our loadedUsers\n      transformResponse: responseData => {\n        const loadedUsers = responseData.map(user => {\n          user.id = user._id;\n          return user;\n        });\n        return usersAdapter.setAll(initialState, loadedUsers);\n      },\n      providesTags: (result, error, arg) => {\n        // optional chaining to check if id's exist\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'User',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'User',\n            id\n          }))];\n        } else return [{\n          type: 'User',\n          id: 'LIST'\n        }];\n      }\n    }),\n    //--------------------------- ADD NEW ----------------------------------\n\n    addNewUser: builder.mutation({\n      query: initialState => ({\n        url: '/users',\n        method: 'POST',\n        body: {\n          ...initialState\n        }\n      }),\n      invalidatesTags: [{\n        type: 'User',\n        id: 'LIST'\n      }]\n    }),\n    //--------------------------- UPDATE ----------------------------------\n\n    updateUser: builder.mutation({\n      query: initialUserdata => ({\n        url: '/users',\n        method: 'PATCH',\n        body: {\n          ...initialUserdata\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'User',\n        id: arg.id\n      }]\n    }),\n    //--------------------------- DELETE ----------------------------------\n\n    deleteUser: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: '/users',\n          method: 'DELETE',\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: 'User',\n        id: arg.id\n      }]\n    })\n  })\n});\n\n// auto-generates our hooks with 'use' and 'query'\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation\n} = usersApiSlice;\n\n// 1. returns the query result object - 'select' the query result\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// 2. creates memoized selector - access to entity tables and IDs - NOT EXPORTING HERE, just creating to use below to define our selectors\nconst selectUsersData = createSelector(selectUsersResult, usersResult => usersResult.data // normalized state object with ids & entities\n);\n\n// 3. getSelectors creates these selectors and we rename them with aliases using destructuring\n// *** we're destructuring and renaming with aliases to use later in User components\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds\n  // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => {\n  var _selectUsersData;\n  return (_selectUsersData = selectUsersData(state)) !== null && _selectUsersData !== void 0 ? _selectUsersData : initialState;\n});\n\n// selector functions examples\n// selectIds returns the state.ids array\n// selectEntities return the state.entities 'lookup table'\n// selectById - takes in state and ID, returns matching entity or undefined\n// these are MEMOIZED selectors and will come in handy for optimization","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","usersAdapter","initialState","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","url","validateStatus","response","result","status","isError","transformResponse","responseData","loadedUsers","map","user","id","_id","setAll","providesTags","error","arg","ids","type","addNewUser","mutation","method","body","invalidatesTags","updateUser","initialUserdata","deleteUser","_ref","useGetUsersQuery","useAddNewUserMutation","useUpdateUserMutation","useDeleteUserMutation","selectUsersResult","select","selectUsersData","usersResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUserIds","getSelectors","state","_selectUsersData"],"sources":["/Users/scottlucas/Desktop/dave_mern_frontend/dave_mern_frontend/src/features/users/usersApiSlice.js"],"sourcesContent":["import { createSelector, createEntityAdapter } from '@reduxjs/toolkit'\nimport { apiSlice } from '../../app/api/apiSlice'\n\nconst usersAdapter = createEntityAdapter({})\n\nconst initialState = usersAdapter.getInitialState()\n\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    //--------------------------- GET ALL ----------------------------------\n\n    getUsers: builder.query({\n      query: () => ({\n        url: '/users',\n        // CHECK THAT STATUS HAS SUCCEEDED '200' AND NO ERROR\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError\n        },\n      }),\n      // keepUnusedDataFor: 5,\n      // we TRANSFORM the ID specifcally from 'id' to our mongo format..., '_id'\n      // we then set the state to our loadedUsers\n      transformResponse: responseData => {\n        const loadedUsers = responseData.map(user => {\n          user.id = user._id\n          return user\n        })\n        return usersAdapter.setAll(initialState, loadedUsers)\n      },\n      providesTags: (result, error, arg) => {\n        // optional chaining to check if id's exist\n        if (result?.ids) {\n          return [\n            { type: 'User', id: 'LIST' },\n            ...result.ids.map(id => ({ type: 'User', id })),\n          ]\n        } else return [{ type: 'User', id: 'LIST' }]\n      },\n    }),\n\n    //--------------------------- ADD NEW ----------------------------------\n\n    addNewUser: builder.mutation({\n      query: initialState => ({\n        url: '/users',\n        method: 'POST',\n        body: {\n          ...initialState,\n        },\n      }),\n      invalidatesTags: [{ type: 'User', id: 'LIST' }],\n    }),\n\n    //--------------------------- UPDATE ----------------------------------\n\n    updateUser: builder.mutation({\n      query: initialUserdata => ({\n        url: '/users',\n        method: 'PATCH',\n        body: {\n          ...initialUserdata,\n        },\n      }),\n      invalidatesTags: (result, error, arg) => [{ type: 'User', id: arg.id }],\n    }),\n\n    //--------------------------- DELETE ----------------------------------\n\n    deleteUser: builder.mutation({\n      query: ({ id }) => ({\n        url: '/users',\n        method: 'DELETE',\n        body: { id },\n      }),\n      invalidatesTags: (result, error, arg) => [{ type: 'User', id: arg.id }],\n    }),\n  }),\n})\n\n// auto-generates our hooks with 'use' and 'query'\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation,\n} = usersApiSlice\n\n// 1. returns the query result object - 'select' the query result\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select()\n\n// 2. creates memoized selector - access to entity tables and IDs - NOT EXPORTING HERE, just creating to use below to define our selectors\nconst selectUsersData = createSelector(\n  selectUsersResult,\n  usersResult => usersResult.data // normalized state object with ids & entities\n)\n\n// 3. getSelectors creates these selectors and we rename them with aliases using destructuring\n// *** we're destructuring and renaming with aliases to use later in User components\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds,\n  // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)\n\n// selector functions examples\n// selectIds returns the state.ids array\n// selectEntities return the state.entities 'lookup table'\n// selectById - takes in state and ID, returns matching entity or undefined\n// these are MEMOIZED selectors and will come in handy for optimization\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}